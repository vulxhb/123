/************ 1. C·∫§U H√åNH ************/
const SH_FORM = 'Form';
const SH_DB   = 'ƒê∆°n h√†ng';
const WITH_DAYS_LEFT = true;        // false n·∫øu KH√îNG d√πng c·ªôt K

/***** E-MAIL c·∫£nh b√°o h·∫øt h·∫°n *****/
const ADMIN_EMAIL = 'samsung2015.vp@gmail.com';  // ƒë·ªãa ch·ªâ nh·∫≠n b√°o c√°o
const ALERT_THRESHOLD = 1;   // 0 ho·∫∑c 1 ng√†y

/***** BACKUP SHEET *****/
const BACKUP_SHEET_ID = '1ZP7_ySuZUETS92OYvvAP9X_sl5pobfZSMIYFcL6-G88'; // Thay b·∫±ng ID c·ªßa sheet backup
const BACKUP_SHEET_NAME = 'Backup'; // T√™n sheet trong file backup

/***** C·∫§U H√åNH L·ªåC D·ªÆ LI·ªÜU - M·ªöI *****/
const FILTER_CONFIG_SHEET = 'Filter_Config'; // Sheet l∆∞u c·∫•u h√¨nh l·ªçc

/* v·ªã tr√≠ c·ªôt (1‚Äëbased) ‚Äì ƒê√É C·∫¨P NH·∫¨T TH√äM M√É ƒê∆†N H√ÄNG */
const COL = {                       
  stt     : 1,   // A - STT
  orderId : 2,   // B - M√É ƒê∆†N H√ÄNG (M·ªöI)
  name    : 3,   // C - T√äN KH√ÅCH  
  contact : 4,   // D - H√åNH TH·ª®C LI√äN H·ªÜ
  pack    : 5,   // E - LO·∫†I T√ÄI KHO·∫¢N
  price   : 6,   // F - GI√Å
  cost    : 7,   // G - V·ªêN
  paid    : 8,   // H - Tr·∫°ng th√°i thanh to√°n
  buy     : 9,   // I - NG√ÄY MUA
  exp     : 10,  // J - NG√ÄY H·∫æT H·∫†N
  left    : 11,  // K - DaysLeft (n·∫øu c√≥)
  note    : WITH_DAYS_LEFT ? 12 : 11   // L ho·∫∑c K - GHI CH√ö
};

/****************************************/

// H√†m ti·ªán √≠ch
function SH(n){ return SpreadsheetApp.getActive().getSheetByName(n); }

function doPost(e) {
  const payload = JSON.parse(e.postData.contents);
  const row = payload.row;  // row number trong sheet
  const sh = SpreadsheetApp.getActive().getSheetByName(SH_DB);
  // T·∫°o orderId & ghi v√†o sheet
  const orderId = createUniqueOrderId();
  sh.getRange(row, COL.orderId).setValue(orderId);
  // Build lineData t·ª´ payload n·∫øu c·∫ßn, ho·∫∑c ƒë·ªçc l·∫°i to√†n row
  const rowData = sh.getRange(row, 1, 1, Object.keys(COL).length).getValues()[0];
  backupData(rowData, false);
  
  // C·∫¨P NH·∫¨T T·∫§T C·∫¢ FILTER SHEETS SAU KHI TH√äM D·ªÆ LI·ªÜU M·ªöI
  updateAllFilterSheets();
  
  return ContentService
    .createTextOutput(JSON.stringify({ status: 'ok', orderId }))
    .setMimeType(ContentService.MimeType.JSON);
}

function readForm(){ 
  const values = SH(SH_FORM).getRange('B1:B9').getValues().flat();
  // Convert date values to Date objects if they exist
  values[4] = values[4] ? new Date(values[4]) : null; // buy date
  values[5] = values[5] ? new Date(values[5]) : null; // exp date
  return values;
}

function writeForm(a){ 
  SH(SH_FORM).getRange('B1:B9').setValues(a.map(v=>[v])); 
}

function clearForm(){
  const f = SH(SH_FORM);
  f.getRange('B1:B9').clearContent();
  f.getRange('E2:F2').clearContent();
  f.getRange('Z1').clearContent();     // h√†ng cache cho update/xo√°
}

// T√¨m h√†ng tr·ªëng ƒë·∫ßu ti√™n - C·∫¢I TI·∫æN
function findEmptyRow(){
  const sh = SH(SH_DB);
  const lastRow = sh.getLastRow();
  
  // N·∫øu sheet c√≤n tr·ªëng (ch·ªâ c√≥ header)
  if(lastRow <= 1) return 2;
  
  // L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu c·ªôt C (T√äN KH√ÅCH) ƒë·ªÉ t√¨m h√†ng tr·ªëng
  const range = sh.getRange(2, COL.name, lastRow - 1, 1);
  const values = range.getValues();
  
  // T√¨m h√†ng tr·ªëng ƒë·∫ßu ti√™n
  for(let i = 0; i < values.length; i++){
    if(!values[i][0] || values[i][0] === ''){
      return i + 2; // +2 v√¨ b·∫Øt ƒë·∫ßu t·ª´ h√†ng 2 v√† index t·ª´ 0
    }
  }
  
  // N·∫øu kh√¥ng c√≥ h√†ng tr·ªëng, th√™m v√†o cu·ªëi
  return lastRow + 1;
}

// T·∫°o m√£ ƒë∆°n h√†ng duy nh·∫•t - M·ªöI
function generateOrderId(){
  const now = new Date();
  const dateStr = Utilities.formatDate(now, Session.getScriptTimeZone(), 'yyMMdd');
  const timeStr = Utilities.formatDate(now, Session.getScriptTimeZone(), 'HHmmss');
  const randomStr = Math.floor(Math.random() * 1000).toString().padStart(3, '0');
  
  return `DH${dateStr}${timeStr}${randomStr}`;
}

// Ki·ªÉm tra m√£ ƒë∆°n h√†ng c√≥ tr√πng kh√¥ng - M·ªöI
function isOrderIdExists(orderId){
  const sh = SH(SH_DB);
  const lastRow = sh.getLastRow();
  
  if(lastRow <= 1) return false;
  
  const orderIds = sh.getRange(2, COL.orderId, lastRow - 1, 1).getValues().flat();
  return orderIds.includes(orderId);
}

// T·∫°o m√£ ƒë∆°n h√†ng duy nh·∫•t kh√¥ng tr√πng - M·ªöI
function createUniqueOrderId(){
  let orderId;
  let attempts = 0;
  
  do {
    orderId = generateOrderId();
    attempts++;
    if(attempts > 100) {
      // N·∫øu th·ª≠ qu√° 100 l·∫ßn, th√™m timestamp ƒë·ªÉ ƒë·∫£m b·∫£o unique
      orderId = `DH${Date.now()}`;
      break;
    }
  } while(isOrderIdExists(orderId));
  
  return orderId;
}

/************ 2. TH√äM - C·∫¢I TI·∫æN ************/
function addCustomer(){
  const ui = SpreadsheetApp.getUi();
  
  try {
    const [name, contact, price, cost, buy, exp, pack, paid, note] = readForm();
    
    // Ki·ªÉm tra d·ªØ li·ªáu b·∫Øt bu·ªôc
    if(!name){ 
      ui.alert('‚ö†Ô∏è L·ªói', 'Vui l√≤ng nh·∫≠p T√äN KH√ÅCH H√ÄNG!', ui.ButtonSet.OK); 
      return; 
    }
    if(!buy){ 
      ui.alert('‚ö†Ô∏è L·ªói', 'Vui l√≤ng nh·∫≠p NG√ÄY MUA!', ui.ButtonSet.OK); 
      return; 
    }

    const row = findEmptyRow();
    const sh = SH(SH_DB);
    const stt = row - 1; // STT = d√≤ng - 1
    const orderId = createUniqueOrderId(); // T·∫°o m√£ ƒë∆°n h√†ng duy nh·∫•t
    
    // Chu·∫©n b·ªã d·ªØ li·ªáu
    const line = [
      stt,                            // A - STT
      orderId,                        // B - M√É ƒê∆†N H√ÄNG
      name,                           // C - T√äN KH√ÅCH
      contact || '',                  // D - H√åNH TH·ª®C LI√äN H·ªÜ
      pack || '',                     // E - LO·∫†I T√ÄI KHO·∫¢N
      price || 0,                     // F - GI√Å
      cost || 0,                      // G - V·ªêN
      paid ? 'ƒë√£ thanh to√°n' : 'ch∆∞a thanh to√°n',  // H - Tr·∫°ng th√°i thanh to√°n
      buy,                           // I - NG√ÄY MUA
      exp || ''                      // J - NG√ÄY H·∫æT H·∫†N
    ];
    
    // Th√™m c·ªôt DaysLeft v√† Ghi ch√∫
    if(WITH_DAYS_LEFT){ 
      // Th√™m c√¥ng th·ª©c t√≠nh Days Left cho c·ªôt K
      line.push(''); // S·∫Ω th√™m c√¥ng th·ª©c sau
      line.push(note || '');         // L - GHI CH√ö
    } else { 
      line.push(note || '');         // K - GHI CH√ö
    }

    // Ghi v√†o sheet ch√≠nh
    sh.getRange(row, 1, 1, line.length).setValues([line]);
    
    // Th√™m c√¥ng th·ª©c Days Left n·∫øu c√≥ ng√†y h·∫øt h·∫°n
    if(WITH_DAYS_LEFT && exp){
      const formula = `=IF(J${row}>0;J${row}-today();"")`;
      sh.getRange(row, COL.left).setFormula(formula);
    }
    
    // Backup d·ªØ li·ªáu
    // T√≠nh gi√° tr·ªã Days Left ƒë·ªÉ backup (thay v√¨ c√¥ng th·ª©c)
    let backupLine = [...line];
    if(WITH_DAYS_LEFT && exp){
      const today = new Date();
      today.setHours(0,0,0,0);
      const daysLeft = Math.ceil((exp - today) / 86400000);
      backupLine[10] = daysLeft; // Thay th·∫ø gi√° tr·ªã tr·ªëng b·∫±ng s·ªë ng√†y
    }
    backupData(backupLine);
    
    // C·∫¨P NH·∫¨T T·∫§T C·∫¢ FILTER SHEETS SAU KHI TH√äM D·ªÆ LI·ªÜU M·ªöI
    updateAllFilterSheets();
    
    // Clear form v√† th√¥ng b√°o
    clearForm();
    ui.alert('‚úÖ Th√†nh c√¥ng', `ƒê√£ th√™m kh√°ch h√†ng "${name}" v√†o d√≤ng ${row}.\nM√£ ƒë∆°n h√†ng: ${orderId}\nD·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c backup v√† c·∫≠p nh·∫≠t filter sheets.`, ui.ButtonSet.OK);
    
  } catch(error) {
    ui.alert('‚ùå L·ªói', 'ƒê√£ x·∫£y ra l·ªói: ' + error.toString(), ui.ButtonSet.OK);
  }
}

/************ 3. T√åM KI·∫æM - C·∫¢I TI·∫æN ************/
function searchCustomer(){
  const ui = SpreadsheetApp.getUi();
  const [nameIn, contactIn] = readForm();
  
  if(!nameIn && !contactIn){ 
    ui.alert('üìå H∆∞·ªõng d·∫´n', 'Nh·∫≠p T√äN ho·∫∑c LI√äN H·ªÜ ƒë·ªÉ t√¨m ki·∫øm kh√°ch h√†ng.', ui.ButtonSet.OK); 
    return; 
  }

  const norm = s => s.toString().toLowerCase()
                    .normalize('NFD').replace(/[\u0300-\u036f]/g,'').trim();
  const nKey = norm(nameIn || '');
  const cKey = norm(contactIn || '');
  
  const sh = SH(SH_DB);
  const data = sh.getDataRange().getValues();
  let found = false;
  let foundCount = 0;
  let foundRows = [];

  for(let r = 1; r < data.length; r++){
    const row = data[r];
    if( (!nKey || norm(row[COL.name-1]).includes(nKey)) &&
        (!cKey || norm(row[COL.contact-1]).includes(cKey)) ){
      
      foundCount++;
      foundRows.push({
        row: r+1, 
        name: row[COL.name-1], 
        contact: row[COL.contact-1], 
        orderId: row[COL.orderId-1]
      });
      
      if(foundCount === 1){
        // Load d·ªØ li·ªáu c·ªßa k·∫øt qu·∫£ ƒë·∫ßu ti√™n
        const back = [
          row[COL.name-1],    // B1 - T√™n
          row[COL.contact-1], // B2 - Li√™n h·ªá
          row[COL.price-1],   // B3 - Gi√°
          row[COL.cost-1],    // B4 - V·ªën
          row[COL.buy-1],     // B5 - Ng√†y mua
          row[COL.exp-1],     // B6 - Ng√†y h·∫øt h·∫°n
          row[COL.pack-1],    // B7 - G√≥i
          row[COL.paid-1] === 'ƒë√£ thanh to√°n', // B8 - ƒê√£ thanh to√°n (boolean)
          row[COL.note-1]     // B9 - Ghi ch√∫
        ];
        writeForm(back);
        SH(SH_FORM).getRange('Z1').setValue(r+1);
        found = true;
      }
    }
  }
  
  if(!found){
    ui.alert('‚ùå Kh√¥ng t√¨m th·∫•y', 'Kh√¥ng t√¨m th·∫•y kh√°ch h√†ng ph√π h·ª£p v·ªõi t·ª´ kh√≥a t√¨m ki·∫øm.', ui.ButtonSet.OK);
  } else if(foundCount === 1){
    ui.alert('‚úÖ T√¨m th·∫•y', `ƒê√£ t√¨m th·∫•y 1 kh√°ch h√†ng.\nM√£ ƒë∆°n h√†ng: ${foundRows[0].orderId}\nB·∫°n c√≥ th·ªÉ C·∫≠p nh·∫≠t ho·∫∑c X√≥a th√¥ng tin.`, ui.ButtonSet.OK);
  } else {
    let message = `T√¨m th·∫•y ${foundCount} kh√°ch h√†ng:\n\n`;
    foundRows.forEach((item, idx) => {
      if(idx < 5){ // Ch·ªâ hi·ªÉn th·ªã 5 k·∫øt qu·∫£ ƒë·∫ßu
        message += `${idx+1}. ${item.name} - ${item.contact} (${item.orderId})\n`;
      }
    });
    if(foundCount > 5) message += `\n... v√† ${foundCount - 5} k·∫øt qu·∫£ kh√°c.`;
    message += '\n\nƒê√£ load th√¥ng tin kh√°ch h√†ng ƒë·∫ßu ti√™n.';
    ui.alert('üìã K·∫øt qu·∫£ t√¨m ki·∫øm', message, ui.ButtonSet.OK);
  }
}

/************ 4. C·∫¨P NH·∫¨T - C·∫¢I TI·∫æN ************/
function updateCustomer(){
  const ui = SpreadsheetApp.getUi();
  const row = Number(SH(SH_FORM).getRange('Z1').getValue());
  
  if(!row){ 
    ui.alert('‚ö†Ô∏è L·ªói', 'Vui l√≤ng T√åM KI·∫æM kh√°ch h√†ng tr∆∞·ªõc khi c·∫≠p nh·∫≠t!', ui.ButtonSet.OK); 
    return; 
  }

  const sh = SH(SH_DB);
  if(row > sh.getLastRow()){ 
    ui.alert('‚ö†Ô∏è L·ªói', 'D√≤ng n√†y ƒë√£ b·ªã x√≥a ho·∫∑c kh√¥ng t·ªìn t·∫°i!', ui.ButtonSet.OK); 
    return; 
  }

  try {
    const [name, contact, price, cost, buy, exp, pack, paid, note] = readForm();
    
    // L·∫•y STT v√† m√£ ƒë∆°n h√†ng c≈© (kh√¥ng thay ƒë·ªïi)
    const oldSTT = sh.getRange(row, COL.stt).getValue();
    const oldOrderId = sh.getRange(row, COL.orderId).getValue();
    
    const line = [
      oldSTT,                         // Gi·ªØ nguy√™n STT
      oldOrderId,                     // Gi·ªØ nguy√™n m√£ ƒë∆°n h√†ng
      name,
      contact || '',
      pack || '',
      price || 0,
      cost || 0,
      paid ? 'ƒë√£ thanh to√°n' : 'ch∆∞a thanh to√°n',
      buy,
      exp || ''
    ];
    
    if(WITH_DAYS_LEFT){ 
      line.push(''); // S·∫Ω th√™m c√¥ng th·ª©c sau
      line.push(note || '');
    } else { 
      line.push(note || '');
    }

    sh.getRange(row, 1, 1, line.length).setValues([line]);
    
    // Th√™m c√¥ng th·ª©c Days Left n·∫øu c√≥ ng√†y h·∫øt h·∫°n
    if(WITH_DAYS_LEFT && exp){
      const formula = `=IF(J${row}>0;J${row}-today();"")`;
      sh.getRange(row, COL.left).setFormula(formula);
    }
    
    // Backup d·ªØ li·ªáu c·∫≠p nh·∫≠t
    // T√≠nh gi√° tr·ªã Days Left ƒë·ªÉ backup
    let backupLine = [...line];
    if(WITH_DAYS_LEFT && exp){
      const today = new Date();
      today.setHours(0,0,0,0);
      const daysLeft = Math.ceil((exp - today) / 86400000);
      backupLine[10] = daysLeft;
    }
    backupData(backupLine, true); // true = update mode
    
    // C·∫¨P NH·∫¨T T·∫§T C·∫¢ FILTER SHEETS SAU KHI C·∫¨P NH·∫¨T D·ªÆ LI·ªÜU
    updateAllFilterSheets();
    
    ui.alert('‚úèÔ∏è C·∫≠p nh·∫≠t th√†nh c√¥ng', `ƒê√£ c·∫≠p nh·∫≠t th√¥ng tin kh√°ch h√†ng "${name}".\nM√£ ƒë∆°n h√†ng: ${oldOrderId}\nFilter sheets ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.`, ui.ButtonSet.OK);
    
  } catch(error) {
    ui.alert('‚ùå L·ªói', 'ƒê√£ x·∫£y ra l·ªói khi c·∫≠p nh·∫≠t: ' + error.toString(), ui.ButtonSet.OK);
  }
}

/************ 5. XO√Å - C·∫¢I TI·∫æN ************/
function deleteCustomer(){
  const ui = SpreadsheetApp.getUi();
  const row = Number(SH(SH_FORM).getRange('Z1').getValue());
  
  if(!row){ 
    ui.alert('‚ö†Ô∏è L·ªói', 'Vui l√≤ng T√åM KI·∫æM kh√°ch h√†ng tr∆∞·ªõc khi x√≥a!', ui.ButtonSet.OK); 
    return; 
  }
  
  const sh = SH(SH_DB);
  const customerName = sh.getRange(row, COL.name).getValue();
  const orderId = sh.getRange(row, COL.orderId).getValue();
  
  const result = ui.alert(
    '‚ö†Ô∏è X√°c nh·∫≠n x√≥a', 
    `B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a kh√°ch h√†ng "${customerName}" (${orderId})?\n\nL∆∞u √Ω: Thao t√°c n√†y kh√¥ng th·ªÉ ho√†n t√°c!`, 
    ui.ButtonSet.YES_NO
  );
  
  if(result == ui.Button.NO) return;
  
  try {
    // X√≥a ch·ªâ x√≥a n·ªôi dung, kh√¥ng x√≥a h√†ng ƒë·ªÉ gi·ªØ c·∫•u tr√∫c
    sh.getRange(row, 1, 1, WITH_DAYS_LEFT ? 12 : 11).clearContent();
    
    // C·∫¨P NH·∫¨T T·∫§T C·∫¢ FILTER SHEETS SAU KHI X√ìA D·ªÆ LI·ªÜU
    updateAllFilterSheets();
    
    clearForm();
    ui.alert('üóëÔ∏è X√≥a th√†nh c√¥ng', `ƒê√£ x√≥a kh√°ch h√†ng "${customerName}" (${orderId}).\nFilter sheets ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.`, ui.ButtonSet.OK);
  } catch(error) {
    ui.alert('‚ùå L·ªói', 'ƒê√£ x·∫£y ra l·ªói khi x√≥a: ' + error.toString(), ui.ButtonSet.OK);
  }
}

/************ 6. D·ªåN D·∫∏P FORM ************/
function clearFormButton(){ 
  clearForm(); 
  SpreadsheetApp.getUi().alert('üßπ ƒê√£ d·ªçn d·∫πp', 'Form nh·∫≠p li·ªáu ƒë√£ ƒë∆∞·ª£c x√≥a s·∫°ch.', SpreadsheetApp.getUi().ButtonSet.OK);
}

/************ 7. DOANH THU - C·∫¢I TI·∫æN ************/
function calcRevenue(){
  const today = new Date(); 
  today.setHours(0,0,0,0);
  const ym = [today.getFullYear(), today.getMonth()];
  
  let dayRevenue = 0;
  let monthRevenue = 0;
  let dayCount = 0;
  let monthCount = 0;
  
  const sh = SH(SH_DB);
  const data = sh.getDataRange().getValues();
  
  data.slice(1).forEach(r => {
    if(!r[COL.name-1]) return; // B·ªè qua h√†ng tr·ªëng
    
    const price = Number(r[COL.price-1]) || 0;
    const buyDate = r[COL.buy-1];
    
    if(buyDate){
      const d = new Date(buyDate); 
      d.setHours(0,0,0,0);
      
      // Doanh thu ng√†y
      if(d.getTime() == today.getTime()){
        dayRevenue += price;
        dayCount++;
      }
      
      // Doanh thu th√°ng
      if(d.getFullYear() == ym[0] && d.getMonth() == ym[1]){
        monthRevenue += price;
        monthCount++;
      }
    }
  });
  
  const f = SH(SH_FORM);
  f.getRange('E2').setValue(dayRevenue);
  f.getRange('F2').setValue(monthRevenue);
  
  const monthName = today.toLocaleDateString('vi-VN', { month: 'long', year: 'numeric' });
  SpreadsheetApp.getUi().alert(
    'üìà B√°o c√°o doanh thu',
    `Doanh thu h√¥m nay: ${dayRevenue.toLocaleString('vi-VN')}ƒë (${dayCount} ƒë∆°n)\n` +
    `Doanh thu ${monthName}: ${monthRevenue.toLocaleString('vi-VN')}ƒë (${monthCount} ƒë∆°n)`,
    SpreadsheetApp.getUi().ButtonSet.OK
  );
}

/************ 8. BACKUP DATA - C·∫¢I TI·∫æN ************/
function backupData(rowData, isUpdate = false) {
  try {
    // Ki·ªÉm tra c·∫•u h√¨nh backup
    if(!BACKUP_SHEET_ID || BACKUP_SHEET_ID === 'YOUR_BACKUP_SHEET_ID_HERE'){
      console.log('Ch∆∞a c·∫•u h√¨nh Backup Sheet ID');
      return;
    }
    
    // M·ªü file backup
    const backupFile = SpreadsheetApp.openById(BACKUP_SHEET_ID);
    let backupSheet = backupFile.getSheetByName(BACKUP_SHEET_NAME);
    
    // N·∫øu ch∆∞a c√≥ sheet backup, t·∫°o m·ªõi
    if(!backupSheet){
      backupSheet = backupFile.insertSheet(BACKUP_SHEET_NAME);
      // T·∫°o header cho sheet backup
      const headers = [
        'M√É ƒê∆†N H√ÄNG', 'T√äN KH√ÅCH', 'H√åNH TH·ª®C LI√äN H·ªÜ', 'LO·∫†I T√ÄI KHO·∫¢N', 
        'GI√Å', 'V·ªêN', 'Tr·∫°ng th√°i thanh to√°n', 'NG√ÄY MUA', 'NG√ÄY H·∫æT H·∫†N'
      ];
      if(WITH_DAYS_LEFT) headers.push('Days Left');
      headers.push('GHI CH√ö', 'Th·ªùi gian backup', 'Lo·∫°i thao t√°c');
      
      backupSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      backupSheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
    }
    
    // Th√™m timestamp v√† lo·∫°i thao t√°c
    const timestamp = new Date();
    const dataWithTimestamp = [...rowData, timestamp, isUpdate ? 'UPDATE' : 'NEW'];
    
    // L·∫•y index c·ªßa c·ªôt Order ID (c·ªôt B) trong sheet backup
    const ORDER_ID_COL = 2;

    // X√°c ƒë·ªãnh s·ªë d√≤ng hi·ªán c√≥ (c√≥ header ·ªü d√≤ng 1)
    const backupLastRow = backupSheet.getLastRow();

    // L·∫•y m·∫£ng gi√° tr·ªã c·ªôt Order ID t·ª´ d√≤ng 2 ƒë·∫øn backupLastRow
    const idValues = backupSheet
      .getRange(2, ORDER_ID_COL, backupLastRow - 1, 1)
      .getValues()
      .flat();

    // T√¨m h√†ng tr·ªëng ƒë·∫ßu ti√™n (n·∫øu cell Order ID l√† chu·ªói r·ªóng ho·∫∑c null)
    let targetRow = idValues.findIndex(v => !v) + 2;

    // N·∫øu kh√¥ng t√¨m th·∫•y (t·ª©c findIndex = -1), th√¨ th√™m xu·ªëng cu·ªëi
    if (targetRow < 2) {
      targetRow = backupLastRow + 1;
    }

    // Ghi d·ªØ li·ªáu v√†o sheet backup t·∫°i h√†ng t√¨m ƒë∆∞·ª£c
    // B·ªè ph·∫ßn t·ª≠ ƒë·∫ßu (STT) trong m·∫£ng, r·ªìi ghi ra b·∫Øt ƒë·∫ßu t·ª´ c·ªôt 2 (B)
    const valuesWithoutStt = dataWithTimestamp.slice(1);
    backupSheet
      .getRange(targetRow, 2, 1, valuesWithoutStt.length)
      .setValues([valuesWithoutStt]);

    // Format ng√†y th√°ng cho d·ªÖ ƒë·ªçc
    const dateColumns = [9, 10]; // C·ªôt NG√ÄY MUA v√† NG√ÄY H·∫æT H·∫†N
    if(WITH_DAYS_LEFT) dateColumns.push(13); // C·ªôt timestamp
    else dateColumns.push(12);
    
    dateColumns.forEach(col => {
      if(dataWithTimestamp[col-1]){
        backupSheet.getRange(targetRow, col).setNumberFormat('dd/mm/yyyy');
      }
    });
    
    console.log(`Backup th√†nh c√¥ng: d√≤ng ${targetRow} trong sheet ${BACKUP_SHEET_NAME}`);
    
  } catch(error) {
    console.error('L·ªói backup:', error);
    // Kh√¥ng th√¥ng b√°o l·ªói backup cho user ƒë·ªÉ kh√¥ng l√†m gi√°n ƒëo·∫°n workflow
  }
}

/************ 9. TRIGGER √¥ D2 - C·∫¢I TI·∫æN ************/
function onEdit(e){
  if(!e || !e.range) return;
  
  const sheet = e.range.getSheet();
  
  // X·ª≠ l√Ω form ƒëi·ªÅu khi·ªÉn
  if(sheet.getName() === SH_FORM && e.range.getA1Notation() === 'D2') {
    const value = e.value;
    if(!value) return;
    
    // Clear cell ngay l·∫≠p t·ª©c
    e.range.clearContent();
    
    // Th·ª±c hi·ªán h√†nh ƒë·ªông d·ª±a tr√™n dropdown
    switch(value){
      case 'Th√™m':      addCustomer();      break;
      case 'T√¨m ki·∫øm':  searchCustomer();   break;
      case 'C·∫≠p nh·∫≠t':  updateCustomer();   break;
      case 'X√≥a':       deleteCustomer();   break;
      case 'D·ªçn d·∫πp':   clearFormButton();  break;
      case 'Doanh thu': calcRevenue();      break;
    }
    return;
  }
  
  // X·ª¨ L√ù CH·ªàNH S·ª¨A TR√äN FILTER SHEETS - M·ªöI
  handleFilterSheetEdit(e);
}

/************ 10. C·∫¢NH B√ÅO H·∫æT H·∫†N - C·∫¢I TI·∫æN ************/
function sendExpiryAlert(){
  const sh = SH(SH_DB);
  const data = sh.getDataRange().getValues();
  const result = [];
  const today = new Date();
  today.setHours(0,0,0,0);

  data.slice(1).forEach((r, idx) => {
    if(!r[COL.name-1]) return; // B·ªè qua h√†ng tr·ªëng
    
    let days;
    if (WITH_DAYS_LEFT){
      days = r[COL.left-1];
    } else {
      const exp = r[COL.exp-1];
      if(!exp) return;
      days = Math.ceil((new Date(exp) - today) / 86400000);
    }
    
    if(days !== '' && days <= ALERT_THRESHOLD){
      result.push({
        row: idx + 2,
        orderId: r[COL.orderId-1],
        name: r[COL.name-1],
        contact: r[COL.contact-1],
        pack: r[COL.pack-1],
        exp: r[COL.exp-1] ? Utilities.formatDate(new Date(r[COL.exp-1]), Session.getScriptTimeZone(),'dd/MM/yyyy') : '',
        days: days,
        status: days < 0 ? 'ƒê√£ h·∫øt h·∫°n' : (days === 0 ? 'H·∫øt h·∫°n h√¥m nay' : `C√≤n ${days} ng√†y`)
      });
    }
  });

  if(result.length === 0) return;

  // S·∫Øp x·∫øp theo s·ªë ng√†y c√≤n l·∫°i
  result.sort((a, b) => a.days - b.days);

  // T·∫°o b·∫£ng HTML ƒë·∫πp h∆°n
  const rows = result.map(o => `
    <tr>
      <td style="text-align:center">${o.row}</td>
      <td style="text-align:center"><b>${o.orderId}</b></td>
      <td><b>${o.name}</b></td>
      <td>${o.contact || '-'}</td>
      <td>${o.pack || '-'}</td>
      <td style="text-align:center">${o.exp}</td>
      <td style="text-align:center; color: ${o.days < 0 ? 'red' : (o.days === 0 ? 'orange' : '#333')}">
        <b>${o.status}</b>
      </td>
    </tr>
  `).join('');

  const html = `
    <div style="font-family: Arial, sans-serif; max-width: 900px; margin: 0 auto;">
      <h2 style="color: #e74c3c;">üîî C·∫£nh b√°o ƒë∆°n h√†ng s·∫Øp/ƒë√£ h·∫øt h·∫°n</h2>
      <p>C√≥ <b>${result.length}</b> ƒë∆°n h√†ng c·∫ßn ch√∫ √Ω (‚â§ ${ALERT_THRESHOLD} ng√†y):</p>
      
      <table border="0" cellpadding="8" cellspacing="0" style="width:100%; border-collapse:collapse; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
        <thead>
          <tr style="background-color: #3498db; color: white;">
            <th style="border: 1px solid #2980b9;">D√≤ng</th>
            <th style="border: 1px solid #2980b9;">M√£ ƒë∆°n h√†ng</th>
            <th style="border: 1px solid #2980b9;">Kh√°ch h√†ng</th>
            <th style="border: 1px solid #2980b9;">Li√™n h·ªá</th>
            <th style="border: 1px solid #2980b9;">G√≥i d·ªãch v·ª•</th>
            <th style="border: 1px solid #2980b9;">Ng√†y h·∫øt h·∫°n</th>
            <th style="border: 1px solid #2980b9;">Tr·∫°ng th√°i</th>
          </tr>
        </thead>
        <tbody style="background-color: #fff;">
          ${rows}
        </tbody>
      </table>
      
      <hr style="margin: 20px 0; border: none; border-top: 1px solid #ecf0f1;">
      <p style="font-size: 12px; color: #7f8c8d;">
        üìÖ B√°o c√°o t·ª± ƒë·ªông - ${Utilities.formatDate(today, Session.getScriptTimeZone(), 'dd/MM/yyyy HH:mm')}<br>
        üìß Email t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng qu·∫£n l√Ω b√°n h√†ng
      </p>
    </div>
  `;

  GmailApp.sendEmail(
    ADMIN_EMAIL,
    `üîî [C·∫¢NH B√ÅO] ${result.length} ƒë∆°n h√†ng s·∫Øp/ƒë√£ h·∫øt h·∫°n`,
    `C√≥ ${result.length} ƒë∆°n h√†ng c·∫ßn x·ª≠ l√Ω. Vui l√≤ng xem chi ti·∫øt trong email.`,
    {
      htmlBody: html,
      name: 'H·ªá th·ªëng Qu·∫£n l√Ω B√°n h√†ng'
    }
  );
}

/************ 11. MENU T√ôY CH·ªàNH - C·∫¢I TI·∫æN ************/
function onOpen() {
  const ui = SpreadsheetApp.getUi();
  ui.createMenu('üõ†Ô∏è C√¥ng c·ª•')
    .addItem('üìä B√°o c√°o doanh thu', 'calcRevenue')
    .addItem('üìß G·ª≠i c·∫£nh b√°o h·∫øt h·∫°n', 'sendExpiryAlert')
    .addSeparator()
    .addSubMenu(ui.createMenu('üîç B·ªô l·ªçc d·ªØ li·ªáu')
      .addItem('‚ûï Th√™m b·ªô l·ªçc m·ªõi', 'addNewFilter')
      .addItem('üîÑ C·∫≠p nh·∫≠t t·∫•t c·∫£ filter', 'updateAllFilterSheets')
      .addItem('üìã Qu·∫£n l√Ω filter', 'manageFilters')
      .addItem('üóëÔ∏è X√≥a filter', 'deleteFilter'))
    .addSeparator()
    .addItem('‚öôÔ∏è C√†i ƒë·∫∑t Trigger t·ª± ƒë·ªông', 'setupTriggers')
    .addItem('üîß X√≥a t·∫•t c·∫£ Trigger', 'deleteTriggers')
    .addItem('üîÑ Ki·ªÉm tra Sheet Backup', 'checkBackupSheet')
    .addItem('üî¢ C·∫≠p nh·∫≠t c√¥ng th·ª©c Days Left', 'updateDaysLeftFormulas')
    .addItem('üÜî T·∫°o l·∫°i header cho sheet m·ªõi', 'setupNewSheetHeaders')
    .addToUi();
}

/************ 12. QU·∫¢N L√ù TRIGGERS - M·ªöI ************/
function setupTriggers() {
  const ui = SpreadsheetApp.getUi();
  
  // X√≥a triggers c≈© tr∆∞·ªõc
  deleteTriggers();
  
  // T·∫°o trigger cho c·∫£nh b√°o h√†ng ng√†y
  ScriptApp.newTrigger('sendExpiryAlert')
    .timeBased()
    .everyDays(1)
    .atHour(9) // 9h s√°ng
    .create();
    
  ui.alert(
    '‚úÖ ƒê√£ c√†i ƒë·∫∑t', 
    'H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông g·ª≠i email c·∫£nh b√°o l√∫c 9h s√°ng m·ªói ng√†y.', 
    ui.ButtonSet.OK
  );
}

function deleteTriggers() {
  const triggers = ScriptApp.getProjectTriggers();
  triggers.forEach(trigger => ScriptApp.deleteTrigger(trigger));
}

/************ 13. KI·ªÇM TRA BACKUP SHEET - M·ªöI ************/
function checkBackupSheet() {
  const ui = SpreadsheetApp.getUi();
  
  try {
    if(!BACKUP_SHEET_ID || BACKUP_SHEET_ID === 'YOUR_BACKUP_SHEET_ID_HERE'){
      ui.alert('‚ö†Ô∏è Ch∆∞a c·∫•u h√¨nh', 'Vui l√≤ng c·∫•u h√¨nh BACKUP_SHEET_ID trong code!', ui.ButtonSet.OK);
      return;
    }
    
    const backupFile = SpreadsheetApp.openById(BACKUP_SHEET_ID);
    let backupSheet = backupFile.getSheetByName(BACKUP_SHEET_NAME);
    
    if(!backupSheet){
      // T·∫°o sheet backup m·ªõi
      backupSheet = backupFile.insertSheet(BACKUP_SHEET_NAME);
      const headers = [
        'STT', 'M√É ƒê∆†N H√ÄNG', 'T√äN KH√ÅCH', 'H√åNH TH·ª®C LI√äN H·ªÜ', 'LO·∫†I T√ÄI KHO·∫¢N', 
        'GI√Å', 'V·ªêN', 'Tr·∫°ng th√°i thanh to√°n', 'NG√ÄY MUA', 'NG√ÄY H·∫æT H·∫†N'
      ];
      if(WITH_DAYS_LEFT) headers.push('Days Left');
      headers.push('GHI CH√ö', 'Th·ªùi gian backup', 'Lo·∫°i thao t√°c');
      
      backupSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
      backupSheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
      
      ui.alert('‚úÖ Th√†nh c√¥ng', 'ƒê√£ t·∫°o sheet backup m·ªõi!', ui.ButtonSet.OK);
    } else {
      // L·∫•y s·ªë d√≤ng cu·ªëi c√πng
      const backupLastRow = backupSheet.getLastRow();
    
      // L·∫•y m·∫£ng Order ID (c·ªôt B) t·ª´ d√≤ng 2 ƒë·∫øn h·∫øt
      const idValues = backupSheet
        .getRange(2, 2, backupLastRow - 1, 1)
        .getValues()
        .flat();
    
      // ƒê·∫øm nh·ªØng √¥ th·ª±c s·ª± c√≥ gi√° tr·ªã Order ID
      const recordCount = idValues.filter(v => v !== '' && v !== null).length;
    
      ui.alert(
        '‚úÖ Sheet backup ho·∫°t ƒë·ªông t·ªët',
        `Sheet backup ƒëang c√≥ ${recordCount} b·∫£n ghi.`,
        ui.ButtonSet.OK
      );
    }
    
  } catch(error) {
    ui.alert('‚ùå L·ªói', 'Kh√¥ng th·ªÉ truy c·∫≠p sheet backup: ' + error.toString(), ui.ButtonSet.OK);
  }
}

/************ 14. C·∫¨P NH·∫¨T C√îNG TH·ª®C DAYS LEFT - M·ªöI ************/
function updateDaysLeftFormulas() {
  if(!WITH_DAYS_LEFT) {
    SpreadsheetApp.getUi().alert('‚ÑπÔ∏è Th√¥ng b√°o', 'T√≠nh nƒÉng Days Left ƒë√£ ƒë∆∞·ª£c t·∫Øt trong c·∫•u h√¨nh.', SpreadsheetApp.getUi().ButtonSet.OK);
    return;
  }
  
  const sh = SH(SH_DB);
  const lastRow = sh.getLastRow();
  
  if(lastRow <= 1) {
    SpreadsheetApp.getUi().alert('‚ÑπÔ∏è Th√¥ng b√°o', 'Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ c·∫≠p nh·∫≠t.', SpreadsheetApp.getUi().ButtonSet.OK);
    return;
  }
  
  // C·∫≠p nh·∫≠t c√¥ng th·ª©c cho to√†n b·ªô c·ªôt K (Days Left)
  for(let row = 2; row <= lastRow; row++) {
    const hasExpDate = sh.getRange(row, COL.exp).getValue();
    if(hasExpDate) {
      const formula = `=IF(J${row}>0;J${row}-today();"")`;
      sh.getRange(row, COL.left).setFormula(formula);
    } else {
      sh.getRange(row, COL.left).clearContent();
    }
  }
  
  SpreadsheetApp.getUi().alert('‚úÖ Th√†nh c√¥ng', `ƒê√£ c·∫≠p nh·∫≠t c√¥ng th·ª©c Days Left cho ${lastRow - 1} d√≤ng.`, ui.ButtonSet.OK);
}

/************ 15. T·∫†O HEADER M·ªöI CHO SHEET - M·ªöI ************/
function setupNewSheetHeaders() {
  const ui = SpreadsheetApp.getUi();
  
  const result = ui.alert(
    '‚ö†Ô∏è X√°c nh·∫≠n', 
    'B·∫°n c√≥ mu·ªën t·∫°o l·∫°i header cho sheet "ƒê∆°n h√†ng" v·ªõi c·ªôt M√É ƒê∆†N H√ÄNG m·ªõi kh√¥ng?\n\nL∆∞u √Ω: Thao t√°c n√†y s·∫Ω ghi ƒë√® header hi·ªán t·∫°i!', 
    ui.ButtonSet.YES_NO
  );
  
  if(result == ui.Button.NO) return;
  
  try {
    const sh = SH(SH_DB);
    
    // T·∫°o header m·ªõi
    const headers = [
      'STT',                    // A
      'M√É ƒê∆†N H√ÄNG',           // B (M·ªöI)
      'T√äN KH√ÅCH',             // C
      'H√åNH TH·ª®C LI√äN H·ªÜ',     // D
      'LO·∫†I T√ÄI KHO·∫¢N',        // E
      'GI√Å',                   // F
      'V·ªêN',                   // G
      'Tr·∫°ng th√°i thanh to√°n', // H
      'NG√ÄY MUA',              // I
      'NG√ÄY H·∫æT H·∫†N'           // J
    ];
    
    if(WITH_DAYS_LEFT) {
      headers.push('Days Left'); // K
      headers.push('GHI CH√ö');   // L
    } else {
      headers.push('GHI CH√ö');   // K
    }
    
    // Ghi header v√†o d√≤ng 1
    sh.getRange(1, 1, 1, headers.length).setValues([headers]);
    sh.getRange(1, 1, 1, headers.length).setFontWeight('bold');
    sh.getRange(1, 1, 1, headers.length).setBackground('#4285f4');
    sh.getRange(1, 1, 1, headers.length).setFontColor('white');
    
    ui.alert('‚úÖ Th√†nh c√¥ng', `ƒê√£ t·∫°o header m·ªõi v·ªõi ${headers.length} c·ªôt.\n\nL∆∞u √Ω: B·∫°n c·∫ßn th√™m c·ªôt "24/07/2025" v√†o √¥ K1 ƒë·ªÉ c√¥ng th·ª©c Days Left ho·∫°t ƒë·ªông.`, ui.ButtonSet.OK);
    
  } catch(error) {
    ui.alert('‚ùå L·ªói', 'ƒê√£ x·∫£y ra l·ªói khi t·∫°o header: ' + error.toString(), ui.ButtonSet.OK);
  }
}

/************ 16. QU·∫¢N L√ù B·ªò L·ªåC D·ªÆ LI·ªÜU - M·ªöI ************/

// T·∫°o sheet c·∫•u h√¨nh filter n·∫øu ch∆∞a c√≥
function createFilterConfigSheet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  let configSheet = ss.getSheetByName(FILTER_CONFIG_SHEET);
  
  if (!configSheet) {
    configSheet = ss.insertSheet(FILTER_CONFIG_SHEET);
    
    // T·∫°o header cho sheet c·∫•u h√¨nh
    const headers = ['T√™n Sheet', 'Tr∆∞·ªùng l·ªçc', 'Gi√° tr·ªã l·ªçc', 'Ng√†y t·∫°o', 'Tr·∫°ng th√°i'];
    configSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
    configSheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
    configSheet.getRange(1, 1, 1, headers.length).setBackground('#34495e');
    configSheet.getRange(1, 1, 1, headers.length).setFontColor('white');
    
    // ·∫®n sheet c·∫•u h√¨nh
    configSheet.hideSheet();
  }
  
  return configSheet;
}

// Th√™m b·ªô l·ªçc m·ªõi
function addNewFilter() {
  const ui = SpreadsheetApp.getUi();
  
  // Nh·∫≠p t√™n sheet
  const sheetNameResult = ui.prompt(
    'üìù T√™n Sheet Filter',
    'Nh·∫≠p t√™n cho sheet filter m·ªõi (v√≠ d·ª•: ChatGPT, Netflix, Spotify):',
    ui.ButtonSet.OK_CANCEL
  );
  
  if (sheetNameResult.getSelectedButton() != ui.Button.OK || !sheetNameResult.getResponseText().trim()) {
    return;
  }
  
  const sheetName = sheetNameResult.getResponseText().trim();
  
  // Ki·ªÉm tra t√™n sheet ƒë√£ t·ªìn t·∫°i
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  if (ss.getSheetByName(sheetName)) {
    ui.alert('‚ö†Ô∏è L·ªói', `Sheet "${sheetName}" ƒë√£ t·ªìn t·∫°i!`, ui.ButtonSet.OK);
    return;
  }
  
  // L·∫•y danh s√°ch lo·∫°i t√†i kho·∫£n c√≥ s·∫µn
  const mainSheet = SH(SH_DB);
  const data = mainSheet.getDataRange().getValues();
  const accountTypes = new Set();
  
  data.slice(1).forEach(row => {
    if (row[COL.pack-1] && row[COL.pack-1].toString().trim()) {
      accountTypes.add(row[COL.pack-1].toString().trim());
    }
  });
  
  const accountTypesArray = Array.from(accountTypes).sort();
  
  if (accountTypesArray.length === 0) {
    ui.alert('‚ö†Ô∏è L·ªói', 'Kh√¥ng t√¨m th·∫•y lo·∫°i t√†i kho·∫£n n√†o trong d·ªØ li·ªáu!', ui.ButtonSet.OK);
    return;
  }
  
  // Hi·ªÉn th·ªã danh s√°ch lo·∫°i t√†i kho·∫£n
  let accountTypesList = 'C√°c lo·∫°i t√†i kho·∫£n c√≥ s·∫µn:\n\n';
  accountTypesArray.forEach((type, index) => {
    accountTypesList += `${index + 1}. ${type}\n`;
  });
  
  // Nh·∫≠p lo·∫°i t√†i kho·∫£n c·∫ßn l·ªçc
  const filterValueResult = ui.prompt(
    'üîç Gi√° tr·ªã l·ªçc',
    accountTypesList + '\nNh·∫≠p ch√≠nh x√°c lo·∫°i t√†i kho·∫£n c·∫ßn l·ªçc:',
    ui.ButtonSet.OK_CANCEL
  );
  
  if (filterValueResult.getSelectedButton() != ui.Button.OK || !filterValueResult.getResponseText().trim()) {
    return;
  }
  
  const filterValue = filterValueResult.getResponseText().trim();
  
  // Ki·ªÉm tra gi√° tr·ªã l·ªçc c√≥ t·ªìn t·∫°i kh√¥ng
  if (!accountTypesArray.includes(filterValue)) {
    ui.alert('‚ö†Ô∏è L·ªói', `Lo·∫°i t√†i kho·∫£n "${filterValue}" kh√¥ng t·ªìn t·∫°i!\n\nVui l√≤ng nh·∫≠p ch√≠nh x√°c theo danh s√°ch.`, ui.ButtonSet.OK);
    return;
  }
  
  try {
    // T·∫°o sheet filter m·ªõi
    const filterSheet = ss.insertSheet(sheetName);
    
    // T·∫°o header cho sheet filter (gi·ªëng sheet ch√≠nh)
    const headers = [
      'STT', 'M√É ƒê∆†N H√ÄNG', 'T√äN KH√ÅCH', 'H√åNH TH·ª®C LI√äN H·ªÜ', 'LO·∫†I T√ÄI KHO·∫¢N', 
      'GI√Å', 'V·ªêN', 'Tr·∫°ng th√°i thanh to√°n', 'NG√ÄY MUA', 'NG√ÄY H·∫æT H·∫†N'
    ];
    
    if(WITH_DAYS_LEFT) {
      headers.push('Days Left');
      headers.push('GHI CH√ö');
    } else {
      headers.push('GHI CH√ö');
    }
    
    filterSheet.getRange(1, 1, 1, headers.length).setValues([headers]);
    filterSheet.getRange(1, 1, 1, headers.length).setFontWeight('bold');
    filterSheet.getRange(1, 1, 1, headers.length).setBackground('#2ecc71');
    filterSheet.getRange(1, 1, 1, headers.length).setFontColor('white');
    
    // L∆∞u c·∫•u h√¨nh filter
    const configSheet = createFilterConfigSheet();
    const lastRow = configSheet.getLastRow();
    const newRow = lastRow + 1;
    
    configSheet.getRange(newRow, 1, 1, 5).setValues([[
      sheetName,
      'LO·∫†I T√ÄI KHO·∫¢N',
      filterValue,
      new Date(),
      'Ho·∫°t ƒë·ªông'
    ]]);
    
    // C·∫≠p nh·∫≠t d·ªØ li·ªáu cho sheet filter m·ªõi
    updateFilterSheet(sheetName, 'LO·∫†I T√ÄI KHO·∫¢N', filterValue);
    
    ui.alert(
      '‚úÖ Th√†nh c√¥ng', 
      `ƒê√£ t·∫°o sheet filter "${sheetName}" cho lo·∫°i t√†i kho·∫£n "${filterValue}".\n\nSheet s·∫Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t khi c√≥ thay ƒë·ªïi d·ªØ li·ªáu.`, 
      ui.ButtonSet.OK
    );
    
  } catch(error) {
    ui.alert('‚ùå L·ªói', 'ƒê√£ x·∫£y ra l·ªói khi t·∫°o filter: ' + error.toString(), ui.ButtonSet.OK);
  }
}

// C·∫≠p nh·∫≠t d·ªØ li·ªáu cho m·ªôt sheet filter
function updateFilterSheet(sheetName, filterField, filterValue) {
  try {
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const filterSheet = ss.getSheetByName(sheetName);
    if (!filterSheet) return;
    
    const mainSheet = SH(SH_DB);
    const data = mainSheet.getDataRange().getValues();
    
    // L·ªçc d·ªØ li·ªáu theo ƒëi·ªÅu ki·ªán
    const filteredData = [];
    let sttCounter = 1;
    
    data.slice(1).forEach(row => {
      if (!row[COL.name-1]) return; // B·ªè qua h√†ng tr·ªëng
      
      let shouldInclude = false;
      
      switch(filterField) {
        case 'LO·∫†I T√ÄI KHO·∫¢N':
          shouldInclude = row[COL.pack-1] && row[COL.pack-1].toString().trim() === filterValue;
          break;
        case 'H√åNH TH·ª®C LI√äN H·ªÜ':
          shouldInclude = row[COL.contact-1] && row[COL.contact-1].toString().trim() === filterValue;
          break;
        case 'Tr·∫°ng th√°i thanh to√°n':
          shouldInclude = row[COL.paid-1] && row[COL.paid-1].toString().trim() === filterValue;
          break;
      }
      
      if (shouldInclude) {
        // T·∫°o d√≤ng d·ªØ li·ªáu m·ªõi v·ªõi STT ƒë∆∞·ª£c ƒë√°nh s·ªë l·∫°i
        const newRow = [...row];
        newRow[COL.stt-1] = sttCounter++;
        filteredData.push(newRow);
      }
    });
    
    // X√≥a d·ªØ li·ªáu c≈© (gi·ªØ l·∫°i header)
    const lastRow = filterSheet.getLastRow();
    if (lastRow > 1) {
      filterSheet.getRange(2, 1, lastRow - 1, WITH_DAYS_LEFT ? 12 : 11).clearContent();
    }
    
    // Ghi d·ªØ li·ªáu m·ªõi
    if (filteredData.length > 0) {
      filterSheet.getRange(2, 1, filteredData.length, WITH_DAYS_LEFT ? 12 : 11).setValues(filteredData);
      
      // Th√™m c√¥ng th·ª©c Days Left n·∫øu c·∫ßn
      if (WITH_DAYS_LEFT) {
        for (let i = 0; i < filteredData.length; i++) {
          const row = i + 2;
          const expDate = filteredData[i][COL.exp-1];
          if (expDate) {
            const formula = `=IF(J${row}>0;J${row}-today();"")`;
            filterSheet.getRange(row, COL.left).setFormula(formula);
          }
        }
      }
    }
    
    console.log(`ƒê√£ c·∫≠p nh·∫≠t ${filteredData.length} b·∫£n ghi cho sheet "${sheetName}"`);
    
  } catch(error) {
    console.error(`L·ªói c·∫≠p nh·∫≠t filter sheet "${sheetName}":`, error);
  }
}

// C·∫≠p nh·∫≠t t·∫•t c·∫£ filter sheets
function updateAllFilterSheets() {
  try {
    const configSheet = createFilterConfigSheet();
    const lastRow = configSheet.getLastRow();
    
    if (lastRow <= 1) return; // Kh√¥ng c√≥ filter n√†o
    
    const configs = configSheet.getRange(2, 1, lastRow - 1, 5).getValues();
    
    configs.forEach(config => {
      const [sheetName, filterField, filterValue, , status] = config;
      
      if (status === 'Ho·∫°t ƒë·ªông') {
        updateFilterSheet(sheetName, filterField, filterValue);
      }
    });
    
    console.log(`ƒê√£ c·∫≠p nh·∫≠t ${configs.length} filter sheets`);
    
  } catch(error) {
    console.error('L·ªói c·∫≠p nh·∫≠t t·∫•t c·∫£ filter sheets:', error);
  }
}

// Qu·∫£n l√Ω filters
function manageFilters() {
  const ui = SpreadsheetApp.getUi();
  
  try {
    const configSheet = createFilterConfigSheet();
    const lastRow = configSheet.getLastRow();
    
    if (lastRow <= 1) {
      ui.alert('‚ÑπÔ∏è Th√¥ng b√°o', 'Ch∆∞a c√≥ filter n√†o ƒë∆∞·ª£c t·∫°o.', ui.ButtonSet.OK);
      return;
    }
    
    const configs = configSheet.getRange(2, 1, lastRow - 1, 5).getValues();
    
    let message = 'Danh s√°ch Filter hi·ªán c√≥:\n\n';
    configs.forEach((config, index) => {
      const [sheetName, filterField, filterValue, createDate, status] = config;
      message += `${index + 1}. Sheet: "${sheetName}"\n`;
      message += `   L·ªçc: ${filterField} = "${filterValue}"\n`;
      message += `   Tr·∫°ng th√°i: ${status}\n`;
      message += `   T·∫°o: ${Utilities.formatDate(createDate, Session.getScriptTimeZone(), 'dd/MM/yyyy')}\n\n`;
    });
    
    ui.alert('üìã Qu·∫£n l√Ω Filter', message, ui.ButtonSet.OK);
    
  } catch(error) {
    ui.alert('‚ùå L·ªói', 'ƒê√£ x·∫£y ra l·ªói khi qu·∫£n l√Ω filter: ' + error.toString(), ui.ButtonSet.OK);
  }
}

// X√≥a filter
function deleteFilter() {
  const ui = SpreadsheetApp.getUi();
  
  try {
    const configSheet = createFilterConfigSheet();
    const lastRow = configSheet.getLastRow();
    
    if (lastRow <= 1) {
      ui.alert('‚ÑπÔ∏è Th√¥ng b√°o', 'Ch∆∞a c√≥ filter n√†o ƒë·ªÉ x√≥a.', ui.ButtonSet.OK);
      return;
    }
    
    const configs = configSheet.getRange(2, 1, lastRow - 1, 5).getValues();
    
    let filterList = 'Ch·ªçn filter c·∫ßn x√≥a:\n\n';
    configs.forEach((config, index) => {
      const [sheetName, filterField, filterValue] = config;
      filterList += `${index + 1}. ${sheetName} (${filterField} = "${filterValue}")\n`;
    });
    
    const result = ui.prompt(
      'üóëÔ∏è X√≥a Filter',
      filterList + '\nNh·∫≠p s·ªë th·ª© t·ª± filter c·∫ßn x√≥a:',
      ui.ButtonSet.OK_CANCEL
    );
    
    if (result.getSelectedButton() != ui.Button.OK) return;
    
    const index = parseInt(result.getResponseText()) - 1;
    
    if (isNaN(index) || index < 0 || index >= configs.length) {
      ui.alert('‚ö†Ô∏è L·ªói', 'S·ªë th·ª© t·ª± kh√¥ng h·ª£p l·ªá!', ui.ButtonSet.OK);
      return;
    }
    
    const sheetName = configs[index][0];
    
    // X√°c nh·∫≠n x√≥a
    const confirmResult = ui.alert(
      '‚ö†Ô∏è X√°c nh·∫≠n x√≥a',
      `B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a filter "${sheetName}"?\n\nSheet s·∫Ω b·ªã x√≥a vƒ©nh vi·ªÖn!`,
      ui.ButtonSet.YES_NO
    );
    
    if (confirmResult != ui.Button.YES) return;
    
    // X√≥a sheet
    const ss = SpreadsheetApp.getActiveSpreadsheet();
    const filterSheet = ss.getSheetByName(sheetName);
    if (filterSheet) {
      ss.deleteSheet(filterSheet);
    }
    
    // X√≥a config
    configSheet.deleteRow(index + 2);
    
    ui.alert('‚úÖ Th√†nh c√¥ng', `ƒê√£ x√≥a filter "${sheetName}".`, ui.ButtonSet.OK);
    
  } catch(error) {
    ui.alert('‚ùå L·ªói', 'ƒê√£ x·∫£y ra l·ªói khi x√≥a filter: ' + error.toString(), ui.ButtonSet.OK);
  }
}

// X·ª≠ l√Ω ch·ªânh s·ª≠a tr√™n filter sheets
function handleFilterSheetEdit(e) {
  const sheet = e.range.getSheet();
  const sheetName = sheet.getName();
  
  // B·ªè qua sheet ch√≠nh v√† form
  if (sheetName === SH_DB || sheetName === SH_FORM || sheetName === FILTER_CONFIG_SHEET) {
    return;
  }
  
  // Ki·ªÉm tra xem c√≥ ph·∫£i filter sheet kh√¥ng
  const configSheet = SH(FILTER_CONFIG_SHEET);
  if (!configSheet) return;
  
  const lastRow = configSheet.getLastRow();
  if (lastRow <= 1) return;
  
  const configs = configSheet.getRange(2, 1, lastRow - 1, 5).getValues();
  const isFilterSheet = configs.some(config => config[0] === sheetName);
  
  if (!isFilterSheet) return;
  
  // L·∫•y d·ªØ li·ªáu t·ª´ filter sheet
  const editedRow = e.range.getRow();
  if (editedRow <= 1) return; // Kh√¥ng cho s·ª≠a header
  
  try {
    const rowData = sheet.getRange(editedRow, 1, 1, WITH_DAYS_LEFT ? 12 : 11).getValues()[0];
    const orderId = rowData[COL.orderId-1];
    
    if (!orderId) return;
    
    // T√¨m v√† c·∫≠p nh·∫≠t d√≤ng t∆∞∆°ng ·ª©ng trong sheet ch√≠nh
    const mainSheet = SH(SH_DB);
    const mainData = mainSheet.getDataRange().getValues();
    
    for (let i = 1; i < mainData.length; i++) {
      if (mainData[i][COL.orderId-1] === orderId) {
        // C·∫≠p nh·∫≠t d√≤ng trong sheet ch√≠nh
        mainSheet.getRange(i + 1, 1, 1, WITH_DAYS_LEFT ? 12 : 11).setValues([rowData]);
        
        // Th√™m l·∫°i c√¥ng th·ª©c Days Left n·∫øu c·∫ßn
        if (WITH_DAYS_LEFT && rowData[COL.exp-1]) {
          const formula = `=IF(J${i + 1}>0;J${i + 1}-today();"")`;
          mainSheet.getRange(i + 1, COL.left).setFormula(formula);
        }
        
        console.log(`ƒê√£ ƒë·ªìng b·ªô d·ªØ li·ªáu t·ª´ sheet "${sheetName}" v·ªÅ sheet ch√≠nh`);
        break;
      }
    }
    
    // C·∫≠p nh·∫≠t t·∫•t c·∫£ filter sheets kh√°c
    setTimeout(() => {
      updateAllFilterSheets();
    }, 1000);
    
  } catch(error) {
    console.error('L·ªói x·ª≠ l√Ω ch·ªânh s·ª≠a filter sheet:', error);
  }
}